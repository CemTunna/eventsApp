[{"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\404.tsx":"1","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\about.tsx":"2","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\account\\dashboard.tsx":"3","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\account\\login.tsx":"4","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\account\\register.tsx":"5","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\login.tsx":"6","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\logout.tsx":"7","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\register.tsx":"8","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\user.tsx":"9","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\add.tsx":"10","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\edit\\[eventId].tsx":"11","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\index.tsx":"12","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\search.tsx":"13","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\[eventSlug].tsx":"14","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\index.tsx":"15","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\_app.tsx":"16","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\_document.tsx":"17","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Confirm.tsx":"18","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\CustomModal.tsx":"19","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\DashboardEventItem.tsx":"20","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\EventItem.tsx":"21","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\EventsLink.tsx":"22","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Footer.tsx":"23","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Header.tsx":"24","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\ImageUpload.tsx":"25","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\layout\\Layout.tsx":"26","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Pagination.tsx":"27","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Search.tsx":"28","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Showcase.tsx":"29","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\SubTitle.tsx":"30","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Text.tsx":"31","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Title.tsx":"32","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\EventsInput.tsx":"33"},{"size":885,"mtime":1651599173875,"results":"34","hashOfConfig":"35"},{"size":599,"mtime":1651440599002,"results":"36","hashOfConfig":"35"},{"size":2545,"mtime":1651613542396,"results":"37","hashOfConfig":"35"},{"size":2918,"mtime":1651613584309,"results":"38","hashOfConfig":"35"},{"size":4173,"mtime":1651605898181,"results":"39","hashOfConfig":"35"},{"size":1092,"mtime":1651594292360,"results":"40","hashOfConfig":"35"},{"size":598,"mtime":1651594300627,"results":"41","hashOfConfig":"35"},{"size":1123,"mtime":1651594312061,"results":"42","hashOfConfig":"35"},{"size":808,"mtime":1651594319425,"results":"43","hashOfConfig":"35"},{"size":5794,"mtime":1651605898831,"results":"44","hashOfConfig":"35"},{"size":7435,"mtime":1651605899442,"results":"45","hashOfConfig":"35"},{"size":1608,"mtime":1651440599156,"results":"46","hashOfConfig":"35"},{"size":1778,"mtime":1651440599157,"results":"47","hashOfConfig":"35"},{"size":2199,"mtime":1651599232909,"results":"48","hashOfConfig":"35"},{"size":1576,"mtime":1651445423862,"results":"49","hashOfConfig":"35"},{"size":523,"mtime":1651613992216,"results":"50","hashOfConfig":"35"},{"size":937,"mtime":1651615467594,"results":"51","hashOfConfig":"35"},{"size":1788,"mtime":1651440598695,"results":"52","hashOfConfig":"35"},{"size":1277,"mtime":1651528202547,"results":"53","hashOfConfig":"35"},{"size":1217,"mtime":1651440598709,"results":"54","hashOfConfig":"35"},{"size":1463,"mtime":1651600687042,"results":"55","hashOfConfig":"35"},{"size":972,"mtime":1651440598827,"results":"56","hashOfConfig":"35"},{"size":530,"mtime":1651440598763,"results":"57","hashOfConfig":"35"},{"size":2690,"mtime":1651605043416,"results":"58","hashOfConfig":"35"},{"size":1669,"mtime":1651593448889,"results":"59","hashOfConfig":"35"},{"size":1143,"mtime":1651440598840,"results":"60","hashOfConfig":"35"},{"size":1171,"mtime":1651440598856,"results":"61","hashOfConfig":"35"},{"size":943,"mtime":1651613596980,"results":"62","hashOfConfig":"35"},{"size":393,"mtime":1651440598800,"results":"63","hashOfConfig":"35"},{"size":558,"mtime":1651440598800,"results":"64","hashOfConfig":"35"},{"size":519,"mtime":1651440598801,"results":"65","hashOfConfig":"35"},{"size":614,"mtime":1651440598808,"results":"66","hashOfConfig":"35"},{"size":1029,"mtime":1651610434401,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ikj6t9",{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\404.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\about.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\account\\dashboard.tsx",["176"],[],"import { ToastContainer, toast } from 'react-toastify';\r\nimport Layout from 'Components/layout/Layout';\r\nimport React from 'react';\r\nimport { parseCookies } from 'Helpers/index';\r\nimport { GetServerSideProps } from 'next';\r\nimport { API_URL } from 'Config/index';\r\nimport { Event } from 'typings';\r\nimport { Grid } from '@mui/material';\r\nimport Title from 'Components/Title';\r\nimport SubTitle from 'Components/SubTitle';\r\nimport DashboardEventItem from 'Components/DashboardEventItem';\r\nimport { useRouter } from 'next/router';\r\nimport Confirm from 'Components/Confirm';\r\nimport type { NextPage } from 'next';\r\n\r\ninterface DashboardPageInterface {\r\n  events: Event[];\r\n  token: string;\r\n}\r\nconst DashboardPage: NextPage<DashboardPageInterface> = ({ events, token }) => {\r\n  const router = useRouter();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [confirm, setConfirm] = React.useState(false);\r\n  const [id, setId] = React.useState<string>();\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const deleteEvent = async (id: string) => {\r\n    const res = await fetch(`${API_URL}/events/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    const data = await res.json();\r\n    if (!res.ok) {\r\n      toast.error(data.message);\r\n    } else {\r\n      router.reload();\r\n    }\r\n  };\r\n  React.useMemo(() => {\r\n    if (confirm) {\r\n      deleteEvent(id!);\r\n    }\r\n    return () => {\r\n      setConfirm(false);\r\n    };\r\n  }, [confirm, id]);\r\n\r\n  return (\r\n    <Layout title='Dashboard'>\r\n      <Grid>\r\n        <Title>Dashboard</Title>\r\n        <SubTitle>My events</SubTitle>\r\n        <Confirm\r\n          open={open}\r\n          handleClose={handleClose}\r\n          setConfirm={setConfirm}\r\n        />\r\n        {events &&\r\n          events.map((item: Event) => (\r\n            <DashboardEventItem\r\n              key={item.id}\r\n              event={item}\r\n              handleClickOpen={handleClickOpen}\r\n              setId={setId}\r\n            />\r\n          ))}\r\n      </Grid>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;\r\nexport const getServerSideProps: GetServerSideProps = async ({ req }) => {\r\n  const { token } = parseCookies(req);\r\n  const res = await fetch(`${API_URL}/events/me`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  const events = await res.json();\r\n  return {\r\n    props: {\r\n      events,\r\n      token,\r\n    },\r\n  };\r\n};\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\account\\login.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\account\\register.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\login.tsx",["177"],[],"import { API_URL } from 'Config/index';\r\nimport cookie from 'cookie';\r\nexport default async (req: any, res: any) => {\r\n  if (req.method === 'POST') {\r\n    const { identifier, password } = req.body;\r\n    const backendRes = await fetch(`${API_URL}/auth/local`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        identifier,\r\n        password,\r\n      }),\r\n    });\r\n    const data = await backendRes.json();\r\n\r\n    if (backendRes.ok) {\r\n      res.setHeader(\r\n        'Set-Cookie',\r\n        cookie.serialize('token', data.jwt, {\r\n          httpOnly: true,\r\n          secure: process.env.NODE_ENV !== 'development',\r\n          maxAge: 60 * 60 * 24 * 7,\r\n          sameSite: 'strict',\r\n          path: '/',\r\n        })\r\n      );\r\n      res.status(200).json({ user: data.user });\r\n    } else {\r\n      res.status(400).json({ message: 'Identifier or password invalid' });\r\n    }\r\n  } else {\r\n    res.setHeader('Allow', ['POST']);\r\n    res.status(405).json({ message: `Method ${req.method} not allowed` });\r\n  }\r\n};\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\logout.tsx",["178"],[],"import { API_URL } from 'Config/index';\r\nimport cookie from 'cookie';\r\nexport default async (req: any, res: any) => {\r\n  if (req.method === 'POST') {\r\n    res.setHeader(\r\n      'Set-Cookie',\r\n      cookie.serialize('token', '', {\r\n        httpOnly: true,\r\n        secure: process.env.NODE_ENV !== 'development',\r\n        expires: new Date(0),\r\n        sameSite: 'strict',\r\n        path: '/',\r\n      })\r\n    );\r\n    res.status(200).json({ message: 'Success' });\r\n  } else {\r\n    res.setHeader('Allow', ['POST']);\r\n    res.status(405).json({ message: `Method ${req.method} not allowed` });\r\n  }\r\n};\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\register.tsx",["179"],[],"import { API_URL } from 'Config/index';\r\nimport cookie from 'cookie';\r\nexport default async (req: any, res: any) => {\r\n  if (req.method === 'POST') {\r\n    const { username, email, password } = req.body;\r\n    const backendRes = await fetch(`${API_URL}/auth/local/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username,\r\n        email,\r\n        password,\r\n      }),\r\n    });\r\n    const data = await backendRes.json();\r\n\r\n    if (backendRes.ok) {\r\n      res.setHeader(\r\n        'Set-Cookie',\r\n        cookie.serialize('token', data.jwt, {\r\n          httpOnly: true,\r\n          secure: process.env.NODE_ENV !== 'development',\r\n          maxAge: 60 * 60 * 24 * 7,\r\n          sameSite: 'strict',\r\n          path: '/',\r\n        })\r\n      );\r\n      res.status(200).json({ user: data.user });\r\n    } else {\r\n      res.status(400).json({ message: data.message[0].messages[0].message });\r\n    }\r\n  } else {\r\n    res.setHeader('Allow', ['POST']);\r\n    res.status(405).json({ message: `Method ${req.method} not allowed` });\r\n  }\r\n};\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\api\\user.tsx",["180"],[],"import { API_URL } from 'Config/index';\r\nimport cookie from 'cookie';\r\nexport default async (req: any, res: any) => {\r\n  if (req.method === 'GET') {\r\n    if (!req.headers.cookie) {\r\n      res.status(403).json({ message: 'Not Authoriezd' });\r\n      return;\r\n    }\r\n    const { token } = cookie.parse(req.headers.cookie);\r\n    const backendRes = await fetch(`${API_URL}/users/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    const user = await backendRes.json();\r\n    if (backendRes.ok) {\r\n      res.status(200).json({ user });\r\n    } else {\r\n      res.status(403).json({ message: 'User forbidden' });\r\n    }\r\n  } else {\r\n    res.setHeader('Allow', ['GET']);\r\n    res.status(405).json({ message: `Method ${req.method} not allowed` });\r\n  }\r\n};\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\add.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\edit\\[eventId].tsx",["181"],[],"import { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport React, { useState } from 'react';\r\nimport Layout from 'Components/layout/Layout';\r\nimport { useRouter } from 'next/router';\r\nimport styles from 'Styles/Form.module.css';\r\nimport styles2 from 'Styles/Link.module.css';\r\nimport classNames from 'classnames';\r\nimport Title from 'Components/Title';\r\nimport { Button, Grid, InputLabel, TextField } from '@mui/material';\r\nimport EventsInput from 'Components/EventsInput';\r\nimport { GetServerSideProps } from 'next';\r\nimport { Event } from 'typings';\r\nimport moment from 'moment';\r\nimport SubTitle from 'Components/SubTitle';\r\nimport Image from 'next/image';\r\nimport CustomModal from 'Components/CustomModal';\r\nimport ImageUpload from 'Components/ImageUpload';\r\nimport EventsLink from 'Components/EventsLink';\r\nimport { API_URL } from 'Config/index';\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport { parseCookies } from 'Helpers/index';\r\nimport type { NextPage } from 'next';\r\n\r\ninterface EditEventPageProps {\r\n  event: Event;\r\n  token: string;\r\n}\r\nconst EditEventPage: NextPage<EditEventPageProps> = ({ token, event }) => {\r\n  const [values, setValues] = useState({\r\n    name: event.name,\r\n    performers: event.performers,\r\n    venue: event.venue,\r\n    address: event.address,\r\n    date: event.date,\r\n    time: event.time,\r\n    description: event.description,\r\n  });\r\n  const [imgPreview, setImgPreview] = useState(\r\n    event.image && event.image.formats.thumbnail.url\r\n  );\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const router = useRouter();\r\n  const isObjectEmpty = () => {\r\n    return Object.values(values).some((element) => element === '');\r\n  };\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (isObjectEmpty()) {\r\n      toast.error('Plese fill all fields');\r\n    }\r\n    const res = await fetch(`${API_URL}/events/${event.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(values),\r\n    });\r\n    if (!res.ok) {\r\n      toast.error('Something went wrong');\r\n    } else {\r\n      const data = await res.json();\r\n      router.push(`/events/${data.slug}`);\r\n    }\r\n  };\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n  const imageUploaded = async () => {\r\n    const res = await fetch(`${API_URL}/events/${event.id}`);\r\n    const data = await res.json();\r\n    setImgPreview(data.image.formats.thumbnail.url);\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <Layout title='Edit Event'>\r\n      <EventsLink\r\n        link='/events'\r\n        className={classNames(styles2.btn, styles2.btnActive)}\r\n      >\r\n        <ArrowBackIosNewIcon style={{ marginRight: 10 }} /> Go Back\r\n      </EventsLink>\r\n      <Title className={styles.title}>Edit Event</Title>\r\n      <ToastContainer />\r\n      <form onSubmit={handleSubmit} className={styles.form}>\r\n        <Grid className={styles.grid}>\r\n          <Grid>\r\n            <InputLabel htmlFor='name' style={{ color: '#f64c72' }}>\r\n              Event Name\r\n            </InputLabel>\r\n            <EventsInput\r\n              className={styles.inpt}\r\n              value={values.name}\r\n              onChange={handleInputChange}\r\n              type='text'\r\n              id='name'\r\n              name='name'\r\n            />\r\n          </Grid>\r\n\r\n          <Grid>\r\n            <InputLabel style={{ color: '#f64c72' }} htmlFor='performers'>\r\n              Performers\r\n            </InputLabel>\r\n            <EventsInput\r\n              className={styles.inpt}\r\n              value={values.performers}\r\n              onChange={handleInputChange}\r\n              type='text'\r\n              id='performers'\r\n              name='performers'\r\n            />\r\n          </Grid>\r\n          <Grid>\r\n            <InputLabel style={{ color: '#f64c72' }} htmlFor='venue'>\r\n              Venue\r\n            </InputLabel>\r\n            <EventsInput\r\n              className={styles.inpt}\r\n              value={values.venue}\r\n              onChange={handleInputChange}\r\n              type='text'\r\n              id='venue'\r\n              name='venue'\r\n            />\r\n          </Grid>\r\n          <Grid>\r\n            <InputLabel style={{ color: '#f64c72' }} htmlFor='address'>\r\n              Address\r\n            </InputLabel>\r\n            <EventsInput\r\n              className={styles.inpt}\r\n              value={values.address}\r\n              onChange={handleInputChange}\r\n              type='text'\r\n              id='address'\r\n              name='address'\r\n            />\r\n          </Grid>\r\n          <Grid>\r\n            <InputLabel style={{ color: '#f64c72' }} htmlFor='date'>\r\n              Date\r\n            </InputLabel>\r\n            <EventsInput\r\n              className={styles.inpt}\r\n              value={moment(values.date).format('yyyy-MM-DD')}\r\n              onChange={handleInputChange}\r\n              type='date'\r\n              id='date'\r\n              name='date'\r\n            />\r\n          </Grid>\r\n\r\n          <Grid>\r\n            <InputLabel style={{ color: '#f64c72' }} htmlFor='time'>\r\n              Time\r\n            </InputLabel>\r\n            <EventsInput\r\n              className={styles.inpt}\r\n              value={values.time}\r\n              onChange={handleInputChange}\r\n              type='text'\r\n              id='time'\r\n              name='time'\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid>\r\n          <Grid>\r\n            <InputLabel style={{ color: '#f64c72' }} htmlFor='description'>\r\n              Description\r\n            </InputLabel>\r\n            <TextField\r\n              type='text'\r\n              name='description'\r\n              id='description'\r\n              multiline\r\n              style={{ width: '100%' }}\r\n              minRows={5}\r\n              value={values.description}\r\n              onChange={handleInputChange}\r\n              InputProps={{\r\n                className: styles.area,\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Button type='submit' className={styles.btn}>\r\n            Update event\r\n          </Button>\r\n        </Grid>\r\n      </form>\r\n      <SubTitle> Event Image</SubTitle>\r\n      {imgPreview ? (\r\n        <Image src={imgPreview} height={150} width={250} />\r\n      ) : (\r\n        <Grid>\r\n          <Title>No image uploaded</Title>\r\n        </Grid>\r\n      )}\r\n      <Grid>\r\n        <EventsLink className={styles.imgBtn} onClick={() => setOpen(true)}>\r\n          Set Image\r\n        </EventsLink>\r\n      </Grid>\r\n      <CustomModal\r\n        handleOpen={() => setOpen(true)}\r\n        open={open}\r\n        handleClose={() => setOpen(false)}\r\n        title={'Set Your Image'}\r\n      >\r\n        <ImageUpload\r\n          id={event.id}\r\n          imageUploaded={imageUploaded}\r\n          token={token}\r\n        />\r\n      </CustomModal>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default EditEventPage;\r\nexport const getServerSideProps: GetServerSideProps = async ({\r\n  params,\r\n  req,\r\n}) => {\r\n  const res = await fetch(`${API_URL}/events/${params && params.eventId}`);\r\n  const event = await res.json();\r\n  const { token } = parseCookies(req);\r\n  return {\r\n    props: {\r\n      event,\r\n      token,\r\n    },\r\n  };\r\n};\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\index.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\search.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\events\\[eventSlug].tsx",["182"],[],"import React from 'react';\r\nimport Layout from 'Components/layout/Layout';\r\nimport { API_URL } from 'Config/index';\r\nimport { Event } from '../../typings';\r\nimport { GetServerSideProps } from 'next';\r\nimport styles from 'Styles/Event.module.css';\r\nimport { Grid } from '@mui/material';\r\nimport Image from 'next/image';\r\nimport Title from 'Components/Title';\r\nimport SubTitle from 'Components/SubTitle';\r\nimport Text from 'Components/Text';\r\nimport { useRouter } from 'next/router';\r\nimport classNames from 'classnames';\r\nimport styles2 from 'Styles/Link.module.css';\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport EventsLink from 'Components/EventsLink';\r\nimport type { NextPage } from 'next';\r\n\r\ninterface EventProps {\r\n  event: Event;\r\n}\r\n\r\nconst EventPage: NextPage<EventProps> = ({ event }) => {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <Layout title='Event Details'>\r\n      <Grid className={styles.event}>\r\n        <span style={{ color: '#fff' }}>\r\n          {new Date(event.date).toLocaleDateString('en-US')} at {event.time}\r\n        </span>\r\n        <Title className={styles.title}>{event.name}</Title>\r\n        {event.image && (\r\n          <Grid className={styles.image}>\r\n            <Image\r\n              src={event.image.formats.medium.url}\r\n              width={960}\r\n              height={600}\r\n            />\r\n          </Grid>\r\n        )}\r\n        <SubTitle>Performers:</SubTitle>\r\n        <Text>{event.performers}</Text>\r\n        <SubTitle>Description:</SubTitle>\r\n        <Text>{event.description}</Text>\r\n        <SubTitle>Venue: {event.venue}</SubTitle>\r\n        <Text>{event.address}</Text>\r\n        <EventsLink\r\n          link='/events'\r\n          className={classNames(styles2.btn, styles2.btnActive)}\r\n        >\r\n          <ArrowBackIosNewIcon style={{ marginRight: 10 }} /> Go Back\r\n        </EventsLink>\r\n      </Grid>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default EventPage;\r\n\r\nexport const getServerSideProps: GetServerSideProps = async ({ query }) => {\r\n  const res = await fetch(`${API_URL}/events?slug=${query.eventSlug}`);\r\n  const events = await res.json();\r\n  return {\r\n    props: {\r\n      event: events[0],\r\n    },\r\n  };\r\n};\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\index.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\_app.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\pages\\_document.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Confirm.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\CustomModal.tsx",["183"],[],"import React, { Fragment, useEffect } from 'react';\r\nimport { Button, Box, Modal, Grid } from '@mui/material';\r\nimport ReactDOM from 'react-dom';\r\nimport SubTitle from './SubTitle';\r\nimport styles from 'Styles/Modal.module.css';\r\nconst style = {\r\n  position: 'absolute' as 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  bgcolor: 'background.paper',\r\n};\r\ninterface CustomModalProps {\r\n  title: string;\r\n  open: boolean;\r\n  children: React.ReactNode;\r\n  handleClose: () => void;\r\n  handleOpen: () => void;\r\n}\r\nconst CustomModal: React.FC<CustomModalProps> = ({\r\n  open,\r\n  title,\r\n  handleClose,\r\n  handleOpen,\r\n  children,\r\n}) => {\r\n  const [isBrowser, setIsBrowser] = React.useState(false);\r\n  useEffect(() => setIsBrowser(true));\r\n\r\n  const content = (\r\n    <Grid>\r\n      <Button onClick={handleOpen}>Open modal</Button>\r\n      <Modal open={open} onClose={handleClose}>\r\n        <Box sx={style} className={styles.container}>\r\n          {title && <SubTitle>{title}</SubTitle>}\r\n          {children}\r\n        </Box>\r\n      </Modal>\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      {isBrowser &&\r\n        ReactDOM.createPortal(content, document.getElementById('modal-root')!)}\r\n    </Fragment>\r\n  );\r\n};\r\nexport default CustomModal;\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\DashboardEventItem.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\EventItem.tsx",["184"],[],"import React from 'react';\r\nimport Image from 'next/image';\r\nimport styles2 from 'Styles/Link.module.css';\r\nimport styles from 'Styles/EventItem.module.css';\r\nimport { Event } from '../typings';\r\nimport { Grid, Typography } from '@mui/material';\r\nimport EventsLink from './EventsLink';\r\nimport classNames from 'classnames';\r\ninterface EventItemProps {\r\n  event: Event;\r\n}\r\nconst EventItem: React.FC<EventItemProps> = ({ event }) => {\r\n  return (\r\n    <Grid className={styles.event}>\r\n      <Grid className={styles.img}>\r\n        <Image\r\n          width={300}\r\n          height={200}\r\n          src={\r\n            event.image\r\n              ? event.image.formats.thumbnail.url\r\n              : '/images/event-default.png'\r\n          }\r\n        />\r\n      </Grid>\r\n      <Grid style={{ marginBottom: '1rem' }}>\r\n        <Grid className={styles.info}>\r\n          <Typography variant='h6' style={{ marginLeft: '1rem' }}>\r\n            {event.name}\r\n          </Typography>\r\n          <span>{new Date(event.date).toLocaleDateString('en-US')}</span>\r\n          <Typography>\r\n            <span style={{ marginRight: '0.2rem' }}>at</span> {event.time}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <EventsLink\r\n          className={classNames(styles2.btn, styles2.btnEvents)}\r\n          link={`/events/${event.slug}`}\r\n        >\r\n          Details\r\n        </EventsLink>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EventItem;\r\n","C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\EventsLink.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Footer.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Header.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\ImageUpload.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\layout\\Layout.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Pagination.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Search.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Showcase.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\SubTitle.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Text.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\Title.tsx",[],[],"C:\\Users\\tuna\\Desktop\\nxt\\events\\frontend\\components\\EventsInput.tsx",[],[],{"ruleId":"185","severity":1,"message":"186","line":53,"column":6,"nodeType":"187","endLine":53,"endColumn":19,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":3,"column":1,"nodeType":"191","endLine":37,"endColumn":3},{"ruleId":"189","severity":1,"message":"190","line":3,"column":1,"nodeType":"191","endLine":20,"endColumn":3},{"ruleId":"189","severity":1,"message":"190","line":3,"column":1,"nodeType":"191","endLine":38,"endColumn":3},{"ruleId":"189","severity":1,"message":"190","line":3,"column":1,"nodeType":"191","endLine":26,"endColumn":3},{"ruleId":"192","severity":1,"message":"193","line":198,"column":9,"nodeType":"194","endLine":198,"endColumn":60},{"ruleId":"192","severity":1,"message":"193","line":35,"column":13,"nodeType":"194","endLine":39,"endColumn":15},{"ruleId":"185","severity":1,"message":"195","line":28,"column":3,"nodeType":"196","endLine":28,"endColumn":12,"suggestions":"197"},{"ruleId":"192","severity":1,"message":"193","line":16,"column":9,"nodeType":"194","endLine":24,"endColumn":11},"react-hooks/exhaustive-deps","React Hook React.useMemo has a missing dependency: 'deleteEvent'. Either include it or remove the dependency array.","ArrayExpression",["198"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect contains a call to 'setIsBrowser'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["199"],{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},"Update the dependencies array to be: [confirm, deleteEvent, id]",{"range":"204","text":"205"},"Add dependencies array: []",{"range":"206","text":"207"},[1566,1579],"[confirm, deleteEvent, id]",[766,766],", []"]